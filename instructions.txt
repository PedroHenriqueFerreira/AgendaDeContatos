ESSE SISTEMA SERVE PRA TU TANTO CRIAR OS SITES COM PHP BONITINHO BEM ORGANIZADO, E TANTO PRA TU CRIAR API, A ÚNICA DIFERENÇA É QUE NAS API's TU NÃO VAI PRECISAR DAS PASTAS = VIEWS, JS, ASSETS, CSS, FONTS ENTÃO APAGUE-OS SE PREFERIR.

COMO USAR: 
  PRIMEIRAMENTE CONECTE-SE COM O BANCO NO ARQUIVO /config/connection.php

  CRIE SUA ROTA NO APP/ROUTES.PHP E INDIQUE QUAL CONTROLLER IRÁ SER DISPARADO QUANDO A ROTA FOR ACIONADA. 

              (SUA ROTA) => [(ESCOLHE O ARQUIVO), (ESCOLHE A FUNCAO)]
  DESSE JEITO: '/teste' => ['testes', 'teste']  

  COM ISSO VOCÊ CRIARÁ O ARQUIVO app/controllers/(Testes)Controller.php // SEM OS: "()"
  E DENTRO DELE:

    class TestesController
    {
      public $testesModel;

      function __construct()
      {
        require(__DIR__ . '/../models/TestesModel.php');
        $this->testesModel = new TestesModel();
        // IMPORTA O MODEL E INSTANCIA A CLASSE
      }

      function teste()
      {
        $result = $this->homeModel->teste();
        // RODA A FUNCAO DENTRO DO MODEL QUE IRÁ RETORNAR INFORMAÇÕES DO BANCO, NESSA PARTE IRÁ TER TODA A LOGICA
        echo json_encode($result);
        // RETORNA EM FORMA DE JSON A RESPOSTA
      }
    }

  COM ISSO VOCÊ CRIARÁ O ARQUIVO app/models/(Testes)Model.php // SEM OS: "()"
  E DENTRO DELE:
    class TestesModel
  {
    function teste()
    {
      $_POST['chave'] = $_POST['chave'] ? $_POST['chave'] : '';
      // PEGUE AS INFORMAÇÕES VIA POST OU GET, DEPENDENDO DO QUE VOCÊ MANDOU

      if (strlen($_POST['chave']) < 5) {
        $errors = 'A CHAVE PRECISA TER MAIS DE 5 CARACTERES';
        return $errors;
      }
      // TRATE OS DADOS ANTES DE ENTRAR NO BANCO

      $stmt = Connection::connect()->prepare('SELECT * FROM chaves WHERE chave = :chave');

      $stmt->bindValue(':chave', $_POST['chave']);

      $stmt->execute();

      $results = $stmt->fetch(PDO::FETCH_OBJ);
      // EXECUTE O COMANDO E PEGUE OS RESULTADOS SE NECESSÀRIO

      if (!$results) {
        $errors = 'NOME NÃO EXISTE';
        return $errors;
      } else {
        return $results;
      }
      // TRATE OS DADOS PARA NÃO SER RETORNADO COISAS INCONSISTENTES
    }
  }

FIQUE ATENTO: CASO PRECISE PASSAR COM ID PELAS ROTAS COLOQUE ASSIM POR EXEMPLO: /testes/teste/(:id) SEM OS '()'
DESSA FORMA VOCÊ CONSEGUIRAR PEGAR O ID DENTRO DOS MODELS COM O POST['id'] OU SEJA, NÃO ACESSE ROTAS COM UM POST ID DENTRO DELE POIS JÁ É RESERVADO PRA ISSO

FINALIZAÇÃO: 
  PRONTO, DESSA FORMA VOCÊ PODERÁ ACESSAR SUA API DESSA FORMA LÁ NO SEU FRONT END

    const formData = new FormData();

    formData.append('chave', 'valor');
    // ADICIONE AS INFORMAÇÕES DESSA FORMA

    fetch('(url)/teste', {
      method: 'POST',
      body: formData
    }).then(e => e.json())
      .then(e => console.log(e)) // DESSA FORMA TU CONSEGUE VER O QUE O A API ESTÁ RETORNANDO
